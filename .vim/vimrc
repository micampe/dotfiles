" options ---

syntax on
filetype plugin indent on

" color scheme
if !has('gui_running')
  autocmd ColorScheme * highlight Normal ctermbg=None
endif

let g:xcodehc_dim_punctuation = 1
colorscheme xcodehc

set encoding=utf-8
set scrolloff=1
set hidden
set splitright
set splitbelow
set nostartofline
set autoread
set completeopt=menuone,noinsert,noselect

if executable('fish')
  set shell=fish
end

" Indentation
set nowrap
set tabstop=8
set shiftwidth=4
set softtabstop=4
set shiftround
set expandtab
set breakindent
set showbreak=\\\\

" Searching
set incsearch
set ignorecase
set smartcase
set infercase
set hlsearch

" Status bar
set ruler
set laststatus=2
set showcmd
set wildmenu
if has("patch-8.1.2225")
  set wildmode=longest:full:lastused,full
else
  set wildmode=longest:full,full
endif
set wildcharm=<c-z>
set backspace=indent,eol,start
set title
set titlelen=30

let s:vim_data_dir = $HOME . '/.local/var/vim//'
if !has('nvim')
  " save backups, undo and swaps in the same dir
  let s:vim_undo_dir = s:vim_data_dir . 'undo//'

  if !isdirectory(s:vim_undo_dir)
    call mkdir(s:vim_undo_dir, 'p')
  endif

  let &backupdir=s:vim_data_dir
  let &directory=s:vim_data_dir
  let &undodir=s:vim_undo_dir
  let &viminfofile=s:vim_data_dir . '/viminfo'
endif
set undofile

let g:netrw_home = s:vim_data_dir

" mappings ---

nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k

" linear history undo
" https://github.com/zaboople/klonk/blob/master/TheGURQ.md
nnoremap u :earlier<cr>
nnoremap <C-r> :later<cr>

" write file with sudo
cnoremap w!! SudoWrite

" make section object motions work when { is not at the beginning of the line
" see :help section
:map [[ ?{<CR>w99[{
:map ][ /}<CR>b99]}
:map ]] j0[[%/{<CR>
:map [] k$][%?}<CR>

" files
cnoremap <expr> %% fnameescape(expand("%:p:h")."/")
nmap <space>e :edit %%<c-z>
nmap <space>f :find %%<c-z>**/*

" buffers
noremap <space><space> :b#<cr>
noremap <space>U :ls<cr>:b 

" fzf
let g:fzf_layout= {
  \ 'window': { 
    \ 'width': 90,
    \ 'height': 20,
    \ }
  \ }

let g:fzf_preview_window = ''

nnoremap <space>o :Files<cr>
nnoremap <space>O :GFiles<cr>
nnoremap <space>u :Buffers<cr>
nnoremap <space>i :History<cr>

" change current word
nnoremap c* *Ncgn

" nicer command line history navigation
cnoremap <C-p> <up>
cnoremap <C-n> <down>

" jump to first non-whitespace on line, jump to begining of line if already at first non-whitespace
nnoremap <expr> <silent> 0 col('.') == match(getline('.'),'\S')+1 ? '0' : '^'

" change to the directory of the current buffer.
nnoremap <space>cb :chdir %:p:h <bar> pwd<cr>
nnoremap <space>cp :call <SID>CdToRepoRoot()<cr>

" typos
cnoremap <expr> X (getcmdtype() is# ':' && empty(getcmdline())) ? 'x' : 'X'
cnoremap <expr> Q (getcmdtype() is# ':' && empty(getcmdline())) ? 'q' : 'Q'


" functions ---

" change to the repo-root-directory of the current buffer.
let g:markers = split('.git')
function! s:CdToRepoRoot() abort
    for marker in g:markers
        let root = finddir(marker, expand('%:p:h') . ';')
        if !empty(root)
            let root = fnamemodify(root, ':h')
            execute('chdir ' . root)
            echo 'cd ' . root . ' (found ' . marker . ')'
            return
        endif
    endfor
    echo 'No repo root found.'
endfunction
