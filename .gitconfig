[alias]
    ci = commit --verbose
    ca = commit --verbose --all
    co = checkout
    st = status --short --branch
    ff = merge --ff-only

    l = log --pretty=color
    g = log --graph --all --pretty=color
    head = log -n1
    last = log --pretty=color ORIG_HEAD..
    reset-date = !git commit --amend --date=\"$(date)\"
    ancestor = merge-base HEAD master
    amend = commit --amend
    clean = clean -i

    branches = branch -a
    tags = tag
    stashes = stash list
    remotes = remote -v

    unstage = reset HEAD              # remove files from index (tracking)
    uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
    discard = checkout --

    # via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
    snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
    snapshots = !git stash list --grep snapshot

    ours   = "!f() { git checkout --ours $@ && git add $@; }; f"
    theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

    #via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
    recent-branches = !git for-each-ref --count=15 --sort=-committerdate refs/heads/ --format='%(refname:short)'

    subupdate = submodule update --init --recursive

    rdar = !open 'rdar://$(git rev-parse --symbolic-full-name --abbrev-ref HEAD | egrep -o \"\\d+\" | head -1)'
    get-patch = !git format-patch HEAD~ -o ~/Desktop/

    yolo = !sh -c \"git commit -a --amend --no-edit && git push --force --dry-run\" -

[init]
    template = ~/.git-template
    templateDir = ~/.git-template

[remote "origin"]
    tagOpt = tags

[pretty]
    color = "format:%Cred%h%C(yellow)%d %Cblue%an %Cgreen%cr%Creset %s"

[diff]
    algorithm = patience

[core]
    excludesfile = ~/.gitignore-global
    attributesfile = ~/.gitattributes-global
    quotepath = false
    pager = less

[color]
    ui = auto
    diff = auto
    status = auto
    branch = auto
    interactive = auto

[credential]
    helper = osxkeychain

[branch]
    autosetuprebase = always

[push]
    default = simple

[rerere]
    enabled = true

[status]
    submodulesummary = true

[mergetool]
    prompt = false

[merge]
    tool = opendiff
    log = true

[rebase]
    autostash = true

[diff "exif"]
    textconv = exiftool

[diff "utf16"]
    textconv = iconv -f utf-16 -t utf-8

[diff "plist"]
    textconv = plutil -convert xml1 -o -

[filter "media"]
    clean = git media clean %f
    smudge = git media smudge %f
    required = true

[include]
    path = ~/.gitconfig.user
