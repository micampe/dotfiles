" options ---

syntax on
filetype plugin indent on

set encoding=utf-8
set scrolloff=1
set hidden
set splitright
set splitbelow
set nostartofline
set autoread
set shell=~/.local/bin/fish

" Indentation
set nowrap
set tabstop=8
set shiftwidth=4
set softtabstop=4
set shiftround
set expandtab
set breakindent
set showbreak=\\\\\ \ 

" Searching
set incsearch
set ignorecase
set smartcase
set infercase
set hlsearch

" Status bar
set ruler
set laststatus=2
set showcmd
set wildmenu
set wildmode=longest:full,full
set wildcharm=<c-z>
set backspace=indent,eol,start
set title

" GUI setup
if has("gui_running")
  silent! colorscheme iceberg
  set guifont=Monaco:h14
  " remove scrollbars
  set guioptions-=r
  set guioptions-=L
  " don't use GUI dialogs
  set guioptions+=c
  " don't use GUI tabs
  set guioptions-=e
  " turn off cursor blinking
  set guicursor+=a:blinkon0
  set columns=90
  set lines=50
else
  let g:jellybeans_use_term_background_color = 1
  silent! colorscheme jellybeans
endif

" save backups, undo and swaps in the same dir
let s:vim_data_dir = $HOME . '/.local/var/vim//'
let s:vim_undo_dir = s:vim_data_dir . 'undo//'

if !isdirectory(s:vim_undo_dir)
  call mkdir(s:vim_undo_dir, 'p')
endif

let &backupdir=s:vim_data_dir
let &directory=s:vim_data_dir
let &undodir=s:vim_undo_dir
set undofile

let g:netrw_home = s:vim_data_dir
let g:gutentags_cache_dir = s:vim_data_dir . "tags"


" mappings ---

" files
cnoremap <expr> %% fnameescape(expand("%:p:h")."/")
nmap <space>e :edit %%<c-z>
nmap <space>f :find %%<c-z>**/*

" buffers
noremap <space>- :b#<cr>
noremap <space>U :ls<cr>:b 

" fzf
let g:fzf_layout = { 'down': '10' }
let g:fzf_preview_window = ''
nnoremap <space>o :Files<cr>
nnoremap <space>O :GFiles<cr>
nnoremap <space>u :Buffers<cr>
nnoremap <space>i :History<cr>

" nN always search in the same direction
noremap <expr> n 'Nn'[v:searchforward]
noremap <expr> N 'Nn'[!v:searchforward]

" change current word
nnoremap c* *Ncgn

" nicer command line history navigation
cnoremap <C-p> <up>
cnoremap <C-n> <down>

" jump to first non-whitespace on line, jump to begining of line if already at first non-whitespace
nnoremap <expr> <silent> 0 col('.') == match(getline('.'),'\S')+1 ? '0' : '^'

" change to the directory of the current buffer.
nnoremap <space>cb :chdir %:p:h <bar> pwd<cr>
nnoremap <space>cp :call <SID>CdToRepoRoot()<cr>

" GUI window zoom
if has("gui_running")
    nnoremap <space>wv :set lines=999<cr>
    nnoremap <space>wz :set lines=999 <bar> set columns=999<cr>
endif

" typos
cnoremap <expr> X (getcmdtype() is# ':' && empty(getcmdline())) ? 'x' : 'X'
cnoremap <expr> Q (getcmdtype() is# ':' && empty(getcmdline())) ? 'q' : 'Q'


" commands ---

command! -nargs=1 -complete=help Help call <SID>ShowHelp(<f-args>)


" functions ---

" change to the repo-root-directory of the current buffer.
let g:markers = split('.git')
function! s:CdToRepoRoot() abort
    for marker in g:markers
        let root = finddir(marker, expand('%:p:h') . ';')
        if !empty(root)
            let root = fnamemodify(root, ':h')
            execute('chdir ' . root)
            echo 'cd ' . root . ' (found ' . marker . ')'
            return
        endif
    endfor
    echo 'No repo root found.'
endfunction

" split help vertically if thereâ€™s room
function! s:ShowHelp(tag) abort
  if winheight(0) * 2 < winwidth(0)
    execute 'vertical help '.a:tag
  else
    execute 'help '.a:tag
  endif
endfunction
