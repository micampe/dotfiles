#!/usr/bin/env python3

import glob
import tempfile
import time
from datetime import datetime

HOSTNAME='rg351mp.local'

def cli():

    @command
    def sync():
        """sync roms, save states, images"""
        if not os.path.isdir('/Volumes/Retro'):
            print("Mounting server directory...")
            cmd('open -g smb://guest:@rpi.local/Retro', shell=True)

            while not os.path.isdir('/Volumes/Retro'):
                # FIXME: timeout?
                time.sleep(1)

        print("Syncing...")
        with tempfile.NamedTemporaryFile(mode='w', delete_on_close=False) as f:
            f.write(sync_excludes)
            f.close()
            cmd('rsync -rz --times --itemize-changes --prune-empty-dirs '
                f'--exclude-from={f.name} --stats '
                f'"{HOSTNAME}:roms/*" '
                '/Volumes/Retro/roms/', shell=True)

    @command
    def send(file, system=None):
        """copy a rom to the device"""
        file = os.path.abspath(file)
        name, ext = os.path.splitext(os.path.basename(file))
        dir = os.path.dirname(file)
        system = system or ext_map.get(ext[1:])
        if not system:
            print(f'Could not infer system from file extension "{ext}"')
            exit(1)
        cmd('scp', '-p', file, f'{HOSTNAME}:roms/{system}/')

        srm = os.path.join(dir, name + '.srm')
        if os.path.exists(srm):
            cmd('scp', '-p', srm, f'{HOSTNAME}:roms/{system}/')

        flash = os.path.join(dir, name + '.flash')
        if os.path.exists(flash):
            cmd('scp', '-p', flash, f'{HOSTNAME}:roms/{system}/')

        bps = os.path.join(dir, name + '.bps')
        ips = os.path.join(dir, name + '.ips')
        if os.path.exists(bps):
            cmd('scp', '-p', bps, f'{HOSTNAME}:roms/{system}/')
        elif os.path.exists(ips):
            cmd('scp', '-p', ips, f'{HOSTNAME}:roms/{system}/')

        images = os.path.join(dir, 'images')
        if os.path.exists(images):
            name = glob.escape(name)
            for i in glob.glob(os.path.join(images, name + '-*')):
                cmd('scp', '-p', i, f'{HOSTNAME}:roms/{system}/images/')

    @command
    def backup():
        """make a backup image of the sd card"""
        date = datetime.now().strftime('%Y%m%d')
        disk = cmd("diskutil info AMBERELC | grep 'Part of Whole'",
                   shell=True, text=True,
                   capture_output=True).stdout.split()[3]
        print(f"Saving {disk} to AmberELEC-{date}.img...")
        cmd('sudo', 'dd',
            f'if=/dev/{disk}',
            f'of=/Volumes/Retro/AmberELEC/AmberELEC-{date}.img',
            'status=progress')
        cmd('diskutil eject AMBERELC', shell=True)


ext_map = {
    'sfc': 'snes',
    'smc': 'snes',
    'v64': 'n64',
    'z64': 'n64',
    'md': 'megadrive',
    'ngc': 'ngpc',
    'ngp': 'ngpc',
    'pce': 'pcengine',
    'vb': 'virtualboy',
    'gbc': 'gb',
}

sync_excludes = """
gamelist.xml
bios
homebrew
images
screenshots
savestates
arcade/*/**
neogeo/fbneo
gamedata/dosbox
gamedata/drastic
gamedata/hatari
gamedata/mupen64plussa
gamedata/ppsspp
backup
*.old
.DS_Store
._*
.smbdelete*
"""




# fmt: off
# https://gist.github.com/sirikon/d4327b6cc3de5cc244dbe5529d8f53ae
import inspect, sys, os, subprocess, re;commands = [];args = sys.argv[1:]
def _c(c): return f'\x1b[{c}m' # Change to `return ''` to disable colors
def cmd(*args, check=True, **k): return subprocess.run(args, check=check, **k)
def command(func): commands.append(func); return func
def _default(i, spec): d=spec.defaults;m=len(spec.args)-len(d or []);return\
    (True,f'={d[i-m]}'if d[i-m]is not None else'') if i >= m else (False,'')
def _ri(s, n): s=re.sub('^[ ]*\n', '', s);s=re.sub('\n[ ]*$', '', s);\
    ls=s.split('\n');i=len(re.match('(^[ ]*)', ls[0]).group(0));\
    return '\n'.join((n * ' ') + re.sub(f'^[ ]{{{i}}}', '', l) for l in ls)
cwd=os.path.abspath(os.curdir); cli()
if len(args) == 0: print(f"{_c(1)}commands:{_c(0)}"); [print(' '.join([
    f'  {_c(96)}{f.__name__}{_c(0)}',
    *[f'{_c(36)}[{a}{d[1]}]{_c(0)}' if d[0] else f'{_c(36)}{a}{_c(0)}' \
        for a,d in ((a,_default(i, spec)) for i, a in enumerate(spec.args))],
    *([f'[...{spec.varargs}]'] if spec.varargs is not None else []),
    *([f'\n{_c(2)}{_ri(f.__doc__, 4)}{_c(0)}'] if f.__doc__ else [])
]))for spec, f in((inspect.getfullargspec(f), f) for f in commands)];exit(0)
matching_commands = [f for f in commands if f.__name__ == args[0]]
if len(matching_commands)==0:print(f'Unknown command "{args[0]}"');sys.exit(1)
try: matching_commands[0](*args[1:])
except KeyboardInterrupt: pass
except subprocess.CalledProcessError as err:
    print(err.stderr or err.stdout)
    sys.exit(err.returncode)
